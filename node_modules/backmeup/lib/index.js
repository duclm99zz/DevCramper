// Generated by CoffeeScript 1.9.0
var backup, backups_list, clean, dateformat, exec, moment, path;

exec = require('ssh2-exec');

moment = require('moment');

path = require('path');

dateformat = 'YYYY-MM-DD-HH:mm:ss';

backup = function(ssh, opt, next) {
  var do_finish, err, info, now;
  if (opt.name == null) {
    err = new Error('no backup name');
  }
  if (opt.source == null) {
    err = new Error('no source file(s)');
  }
  if (opt.destination == null) {
    err = new Error('no destination');
  }
  if (err != null) {
    return next(err, opt);
  }
  info = opt;
  if (info.archive == null) {
    info.archive = true;
  }
  if (info.clean_source == null) {
    info.clean_source = false;
  }
  now = moment();
  info.dateformat = dateformat;
  info.date = now.format(info.dateformat);
  info.source = path.normalize(info.source);
  info.destination = path.normalize(info.destination);
  do_finish = function() {
    var c, cmd, elmt, extension, i, _i, _j, _len, _len1, _ref, _ref1;
    if (info.archive) {
      cmd = "mkdir -p " + (path.join(info.destination, info.name)) + "; ";
      if (info.compress == null) {
        info.compress = true;
      }
      if (info.compress) {
        if (info.algorithm == null) {
          info.algorithm = 'gzip';
        }
        switch (false) {
          case info.algorithm !== 'gzip':
            c = 'z';
            extension = 'tar.gz';
            break;
          case info.algorithm !== 'bunzip2':
            c = 'j';
            extension = 'tar.bz2';
            break;
          case info.algorithm !== 'xz':
            c = 'J';
            extension = 'tar.xz';
        }
      } else {
        c = '';
        extension = 'tar';
      }
      info.filename = info.date + "." + extension;
      cmd += "tar -" + c + "cvf " + (path.join(info.destination, info.name, info.filename)) + " -C " + info.source + " ";
      if (info.filter != null) {
        cmd += Array.isArray(info.filter) ? info.filter.join(' ') : info.filter;
      } else {
        cmd += '. ';
      }
    } else {
      cmd = "mkdir -p " + (path.join(info.destination, info.name, info.date)) + "; ";
      if (info.filter != null) {
        if (Array.isArray(info.filter)) {
          _ref = info.filter;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            elmt = _ref[i];
            if (i !== 0) {
              cmd += "&& ";
            }
            cmd += "cp -R " + (path.join(info.source, elmt)) + " " + (path.join(info.destination, info.name, info.date));
          }
        } else if (typeof info.filter === 'string') {
          cmd += "cp -R " + (path.join(info.source, info.filter)) + " " + (path.join(info.destination, info.name, info.date));
        } else {
          return next(new Error('Incorrect filter type: string or string array only'));
        }
      } else {
        cmd += "cp -R " + info.source + " " + (path.join(info.destination, info.name, info.date));
      }
    }
    if (info.clean_source) {
      if (info.filter != null) {
        if (Array.isArray(info.filter)) {
          cmd += " && rm -rf";
          _ref1 = info.filter;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            elmt = _ref1[_j];
            cmd += " " + (path.join(info.source, elmt));
          }
        } else {
          cmd += " && rm -rf " + (path.join(info.source, info.filter));
        }
      } else {
        cmd += " && rm -rf " + info.source;
      }
    }
    info.cmd = cmd;
    return exec(ssh, cmd, function(err, _stdout, _stderr) {
      if (err != null) {
        info.done = false;
      } else {
        info.done = true;
        if (info.retention != null) {
          if (info.retention) {
            return clean(ssh, info, next);
          }
        }
      }
      return next(err, info.done, info);
    });
  };
  if (info.interval != null) {
    return backups_list(ssh, info, function(err, info, list) {
      if (err != null) {
        info.done = false;
        return next(err, info.done, info);
      }
      if (list.length > 0) {
        if (now.isBefore(list.pop().date.add(moment.duration(info.interval)))) {
          info.done = false;
          return next(null, info.done, info);
        }
      }
      return do_finish();
    });
  } else {
    return do_finish();
  }
};

clean = function(ssh, opt, next) {
  var err, info, now;
  if (opt.destination == null) {
    err = new Error('no destination ');
  }
  if (opt.name == null) {
    err = new Error('no backup name ');
  }
  if (opt.destination != null) {
    if (!((opt.count != null) || (opt.date != null) || (opt.age != null))) {
      err = new Error('no property in retention object');
    }
  } else {
    err = new Error('no retention object');
  }
  if (err != null) {
    if (opt.done != null) {
      return next(err, opt.done, opt);
    }
    return next(err, false, opt);
  }
  info = opt;
  info.dateformat = dateformat;
  if (info.date == null) {
    info.date = moment().format(dateformat);
  }
  now = moment(info.date, info.dateformat);
  return backups_list(ssh, info, function(err, info, list) {
    var cmd, elmt, max_date, todl, _i, _len;
    if (err != null) {
      if (info.done != null) {
        return next(err, info.done, info);
      }
      return next(err, false, info);
    }
    todl = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      elmt = list[_i];
      if (info.retention.count != null) {
        if (list.length - todl.length > info.retention.count) {
          todl.push(elmt.name);
          continue;
        }
      }
      if (info.retention.age != null) {
        max_date = now.subtract(moment.duration(info.retention.age));
        if (elmt.date.isBefore(max_date)) {
          todl.push(elmt.name);
          continue;
        }
      }
      if (info.retention.date != null) {
        max_date = moment(info.retention.date, info.dateformat);
        if (elmt.date.isBefore(max_date)) {
          todl.push(elmt.name);
          continue;
        }
      }
    }
    cmd = "rm -rf " + (todl.join(' '));
    return exec(ssh, cmd, function(err, stdout, stderr) {
      if (info.done != null) {
        return next(err, info.done, info);
      }
      return next(err, err == null, info);
    });
  });
};

backups_list = function(ssh, opt, next) {
  var err, info;
  if (opt.destination == null) {
    err = new Error('no destination ');
  }
  if (opt.name == null) {
    err = new Error('no backup name ');
  }
  if (err != null) {
    return next(err, info);
  }
  info = opt;
  if (info.dateformat == null) {
    info.dateformat = dateformat;
  }
  if (info.date == null) {
    info.date = moment().format(info.dateformat);
  }
  return exec(ssh, "ls --format single-column " + (path.join(info.destination, info.name)), function(err, stdout, stderr) {
    var elmt, list, moments, _i, _len;
    if (err != null) {
      return next(null, info, []);
    }
    list = stdout.split('\n');
    list.pop();
    moments = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      elmt = list[_i];
      moments.push({
        name: path.join(info.destination, info.name, elmt),
        date: moment(elmt.split('.').shift(), info.dateformat)
      });
    }
    return next(null, info, moments);
  });
};

module.exports = {};

module.exports.backup = backup;

module.exports.clean = clean;

module.exports.backups_list = backups_list;

module.exports.dateformat = dateformat;
